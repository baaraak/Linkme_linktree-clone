{"version":3,"sources":["components/analytics/Analytics.jsx","components/resizable-input/ResizableInput.jsx","components/link/Link.jsx","screens/dashboard/links/index.jsx","screens/dashboard/links/useLinks.js"],"names":["Analytics","useCollapse","getCollapseProps","getToggleProps","isExpanded","className","Strong","size","color","marginRight","Text","HelpIcon","ChevronUpIcon","ChevronDownIcon","ResizableInput","defaultValue","onChange","placeholder","rest","useState","width","setWidth","value","setValue","text","useRef","useEffect","Math","max","current","getBoundingClientRect","style","e","target","ref","DeleteComponent","onClose","onDelete","_id","Button","fullWidth","height","onClick","appearance","intent","AnalyticComponent","clicks","ThumbnailComponent","onThumbnail","Messages","DELETE","id","title","component","ANALYTIC","THUMBNAIL","Link","href","provided","active","isDragging","onUpdate","linkMessage","setLinkMessage","handleChange","name","draggableProps","innerRef","dragHandleProps","viewBox","d","onBlur","EditIcon","Tooltip","content","MediaIcon","GroupedBarChartIcon","TrashIcon","React","cloneElement","Links","useSite","links","data","updateLinks","create","useCallback","a","api","link","delete","reOrder","newSortedLinks","update","useMemo","sort","b","index","useLinks","console","log","marginTop","length","onDragEnd","draggableId","destination","source","newL","reorder","droppableId","snapshot","droppableProps","map"],"mappings":"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","file":"static/js/10.83c5a081.chunk.js","sourcesContent":["import {\n  Button,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Help,\n  HelpIcon,\n  Strong,\n  Text,\n} from \"evergreen-ui\";\nimport React from \"react\";\nimport useCollapse from \"react-collapsed\";\n\nimport \"./styles.scss\";\n\nconst Analytics = () => {\n  const { getCollapseProps, getToggleProps, isExpanded } = useCollapse();\n  return (\n    <div className=\"analytics\">\n      <div className=\"analytics__toggle\" {...getToggleProps()}>\n        <Strong size={400} color=\"black\" marginRight={20}>\n          Lifetime Analytics:\n        </Strong>\n        <Text size={500} color=\"black\" marginRight={30}>\n          Views: 3012\n        </Text>\n        <Text size={500} color=\"black\" marginRight={30}>\n          Clicks: 25\n        </Text>\n        <div className=\"icon-help\">\n          <HelpIcon />\n        </div>\n        <div className=\"icon-chevron\">\n          {isExpanded ? (\n            <ChevronUpIcon size={20} />\n          ) : (\n            <ChevronDownIcon size={20} />\n          )}\n        </div>\n      </div>\n      <section className=\"analytics__collapse\" {...getCollapseProps()}>\n        <Button>GO PROP</Button>\n      </section>\n    </div>\n  );\n};\n\nexport default Analytics;\n","import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\nimport \"./styles.scss\";\nconst ResizableInput = ({ defaultValue, onChange, placeholder, ...rest }) => {\n  const [width, setWidth] = useState();\n  const [value, setValue] = useState(defaultValue);\n  const text = useRef();\n\n  useEffect(() => {\n    setWidth(Math.max(text.current.getBoundingClientRect().width, 20) + 10);\n  }, [text, value]);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n    onChange?.(e.target.value);\n  };\n  return (\n    <div className=\"resizable-input\">\n      <input\n        {...rest}\n        style={{ width }}\n        onChange={handleChange}\n        value={value}\n        placeholder={placeholder}\n      />\n      <span ref={text}>{value || placeholder}</span>\n    </div>\n  );\n};\n\nexport default ResizableInput;\n","import React, { useState } from \"react\";\nimport {\n  EditIcon,\n  GroupedBarChartIcon,\n  MediaIcon,\n  Strong,\n  Text,\n  Tooltip,\n  TrashIcon,\n} from \"evergreen-ui\";\n\nimport \"./styles.scss\";\nimport ResizableInput from \"../resizable-input/ResizableInput\";\nimport Button from \"../button/Button\";\n\nconst DeleteComponent = ({ onClose, onDelete, _id }) => {\n  return (\n    <div className=\"delete-component\">\n      <Text color=\"black\">\n        Are you sure you want to delete this link? This action cannot be undone.\n      </Text>\n      <div className=\"actions\">\n        <Button fullWidth height={40} onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          fullWidth\n          height={40}\n          appearance=\"primary\"\n          intent=\"danger\"\n          onClick={() => onDelete(_id)}\n        >\n          Delete\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst AnalyticComponent = ({ clicks }) => {\n  return (\n    <Text color=\"black\">\n      This link has been clicked <Strong>{clicks}</Strong> times.\n    </Text>\n  );\n};\n\nconst ThumbnailComponent = ({ onThumbnail }) => {\n  return <div>\"ThumbnailComponent\"</div>;\n};\n\nconst Messages = {\n  DELETE: {\n    id: \"delete\",\n    title: \"Delete Link\",\n    component: <DeleteComponent />,\n  },\n  ANALYTIC: {\n    id: \"analytic\",\n    title: \"Link Analytics\",\n    component: <AnalyticComponent />,\n  },\n  THUMBNAIL: {\n    id: \"thumbnail\",\n    title: \"Add Thumbnail\",\n    component: <ThumbnailComponent />,\n  },\n};\n\nconst Link = ({\n  title,\n  href,\n  active,\n  provided,\n  isDragging,\n  clicks,\n  onDelete,\n  onThumbnail,\n  onUpdate,\n  _id,\n}) => {\n  const [linkMessage, setLinkMessage] = useState();\n\n  const handleChange = (e) => {\n    onUpdate(_id, { [e.target.name]: e.target.value });\n  };\n  return (\n    <div\n      className={`link-container ${isDragging ? \"shadow-2xl\" : \"shadow\"}`}\n      {...provided.draggableProps}\n      ref={provided.innerRef}\n    >\n      <div className=\"link\">\n        <div className=\"link__handle\" {...provided.dragHandleProps}>\n          <svg width=\"4\" height=\"16\" viewBox=\"0 0 4 16\">\n            <path d=\"M0 2C0 .897.897 0 2 0s2 .897 2 2-.897 2-2 2-2-.897-2-2M0 8c0-1.103.897-2 2-2s2 .897 2 2-.897 2-2 2-2-.897-2-2M0 14c0-1.103.897-2 2-2s2 .897 2 2-.897 2-2 2-2-.897-2-2\"></path>\n          </svg>\n        </div>\n        <div className=\"link__content\">\n          <div className=\"input link__title\">\n            <ResizableInput\n              onBlur={handleChange}\n              name=\"title\"\n              defaultValue={title}\n              placeholder=\"Enter title\"\n            />\n            <EditIcon />\n          </div>\n          <div className=\"input link__href\">\n            <ResizableInput\n              onBlur={handleChange}\n              placeholder=\"http://url\"\n              defaultValue={href}\n              name=\"href\"\n            />\n\n            <EditIcon />\n          </div>\n          <div className=\"link__actions\">\n            <div\n              className=\"thumbnails\"\n              onClick={() => setLinkMessage(Messages.THUMBNAIL)}\n            >\n              <Tooltip content=\"Add Thumbnail\">\n                <MediaIcon />\n              </Tooltip>\n            </div>\n            <div\n              className=\"analytic\"\n              onClick={() => setLinkMessage(Messages.ANALYTIC)}\n            >\n              <Tooltip content=\"Analytics\">\n                <GroupedBarChartIcon />\n              </Tooltip>\n            </div>\n            <div\n              className=\"trash\"\n              onClick={() => setLinkMessage(Messages.DELETE)}\n            >\n              <Tooltip content=\"Delete\">\n                <TrashIcon />\n              </Tooltip>\n            </div>\n          </div>\n        </div>\n      </div>\n      {linkMessage && (\n        <div className=\"link__message\">\n          <div className=\"title\">\n            <Strong color=\"black\">{linkMessage.title}</Strong>\n            <div className=\"close\" onClick={() => setLinkMessage(null)}>\n              x\n            </div>\n          </div>\n          <div className=\"message\">\n            {React.cloneElement(linkMessage.component, {\n              onClose: () => setLinkMessage(null),\n              clicks,\n              _id,\n              onDelete,\n              onThumbnail,\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Link;\n","import { Heading, Text } from \"evergreen-ui\";\nimport Button from \"components/button/Button\";\nimport useLinks from \"./useLinks\";\nimport Analytics from \"components/analytics/Analytics\";\nimport Link from \"components/link/Link\";\nimport { reorder } from \"services/utils\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { useMemo, useState } from \"react\";\n\nexport default function Links() {\n  const { links, create, onDelete, reOrder, update } = useLinks();\n\n  const onDragEnd = ({ draggableId, destination, source }) => {\n    // dropped outside the list\n    if (!draggableId || !destination || !source) {\n      return;\n    }\n    const newL = reorder(\n      links,\n      links[source.index].index,\n      links[destination.index].index\n    );\n\n    reOrder({ links: newL });\n  };\n  console.log({ links });\n\n  return (\n    <div className=\"settings\">\n      <Analytics />\n      <div className=\"page__container\">\n        <Button\n          fullWidth\n          onClick={create}\n          appearance=\"primary\"\n          height={45}\n          marginTop={50}\n        >\n          Add New Link\n        </Button>\n\n        <div className=\"links\">\n          {links.length > 0 ? (\n            <DragDropContext onDragEnd={onDragEnd}>\n              <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                  <div {...provided.droppableProps} ref={provided.innerRef}>\n                    {links.map((link, index) => (\n                      <Draggable\n                        key={link._id}\n                        draggableId={link._id}\n                        index={index}\n                      >\n                        {(provided, snapshot) => (\n                          <Link\n                            key={link._id}\n                            {...link}\n                            provided={provided}\n                            onDelete={onDelete}\n                            onUpdate={update}\n                            isDragging={snapshot.isDragging}\n                          />\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n          ) : (\n            <div className=\"link__empty\">\n              You don't have any links to display.\n              <br />\n              Click the button above to add one.\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useSite } from \"context/site.context\";\nimport api from \"services/api\";\n\nexport default function useLinks() {\n  const {\n    data: { links },\n    updateLinks,\n  } = useSite();\n\n  const create = useCallback(async () => {\n    const { links } = await api.link.create();\n    updateLinks(links);\n  }, [updateLinks]);\n\n  const onDelete = useCallback(\n    async (id) => {\n      const { links } = await api.link.delete(id);\n      updateLinks(links);\n    },\n    [updateLinks]\n  );\n\n  const reOrder = useCallback(\n    async (newSortedLinks) => {\n      updateLinks(newSortedLinks.links);\n      await api.link.reOrder(newSortedLinks);\n    },\n    [updateLinks]\n  );\n\n  const update = useCallback(\n    async (id, data) => {\n      const { links } = await api.link.update(id, data);\n      updateLinks(links);\n    },\n    [updateLinks]\n  );\n\n  const sortedLinks = useMemo(() => links.sort((a, b) => a.index - b.index), [\n    links,\n  ]);\n\n  return { links, create, onDelete, reOrder, update };\n}\n"],"sourceRoot":""}